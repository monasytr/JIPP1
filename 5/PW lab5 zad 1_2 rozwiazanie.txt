// ConsoleApplicatiiifiss.cpp : Defines the entry point for the console application.
//


// ConsoleApplica.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include <iostream>

using namespace std;
template <typename T>
class Vector {
private:
	size_t dimensions;
	T* data;
public:
	Vector<T>(size_t dimensions) :
		dimensions(dimensions), data(new T[dimensions]()) {}
	virtual ~Vector<T>() {
		if (data) delete[] data;
	}
	Vector<T>(const Vector<T>& v) {
		this->dimensions = v.size();
		this->data = new T[dimensions]();
		for (int i = 0; i < dimensions; i++)
			this->data[i] = v[i];
	}
	Vector<T>& operator = (const Vector<T>& v) {
		this->dimensions = v.size();
		delete[] this->data;
		this->data = new T[dimensions]();
		for (int i = 0; i < dimensions; i++)
			this->data[i] = v[i];
		return *this;
	}
	size_t size() const {
		return dimensions;
	}
	T& at(size_t index) {
		return data[index];
	}
	const T& at(size_t index) const {
		return data[index];
	}
	T& operator [](size_t index) {
		return data[index];
	}
	const T& operator [](size_t index) const {
		return data[index];
	}
	friend ostream& operator<< (ostream& o, Vector<T>& v) {
		for (size_t i = 0; i < v.dimensions; i++)
			o << v[i] << "  ";
		return o;
	}
};

template<typename T>
Vector<T> add(const Vector<T>& a, const Vector<T>& b) {
	Vector<T> c(a.size());
	for (size_t i = 0; i < a.size(); i++) {
		c[i] = a[i] + b[i];
	}
	return c;
}
template<typename T>
Vector<T> operator +(const Vector<T>& a, const Vector<T>& b) {
	Vector<T> c(a.size());
	for (size_t i = 0; i < a.size(); i++) {
		c[i] = a[i] + b[i];
	}
	return c;
}
template<typename T>
Vector<T> operator -(const Vector<T>& a, const Vector<T>& b) {
	Vector<T> c(a.size());
	for (size_t i = 0; i < a.size(); i++) {
		c[i] = a[i] - b[i];
	}
	return c;
}
template<typename T>
bool equals(const Vector<T>& a, const Vector<T>& b) {
	if (&a == &b) return true;
	if (a.size() != b.size())
		return false;
	for (size_t i = 0; i < a.size(); i++) {
		if (a[i] != b[i]) return false;
	}
	return true;
}template<typename T>
bool operator ==(const Vector<T>& a, const Vector<T>& b) {
	if (&a == &b) return true;
	if (a.size() != b.size())
		return false;
	for (size_t i = 0; i < a.size(); i++) {
		if (a[i] != b[i]) return false;
	}
	return true;
}template<typename T>
bool operator !=(const Vector<T>& a, const Vector<T>& b) {
	if (&a == &b) return false;
	else if (a.size() != b.size()) return true;
	else {
		for (size_t i = 0; i < a.size(); i++)
			if (a[i] != b[i]) return true;
	}
	return false;
}
int main() {
	typedef int T;
	const size_t d = 10;
	Vector<T> v1(d);
	for (size_t i = 0; i < d; i++) {
		v1[i] = (T)i;
	}
	cout << "Wektor v1: " << v1 << endl;
	Vector<T> v2 = v1 + v1;
	cout << "Wektor v2: " << v2 << endl;
	cout << "v1 == v1: " << (v1 == v1 ? "TAK" : "NIE") << endl;
	cout << "v1 != v1: " << (v1 != v1 ? "TAK" : "NIE") << endl;
	cout << "v1 == v2: " << (v1 == v2 ? "TAK" : "NIE") << endl;
	cout << "v1 != v2: " << (v1 != v2 ? "TAK" : "NIE") << endl;
	Vector<T> v3(5);
	cout << "Wektor v3: " << v3 << endl;
	cout << "v1 == v3: " << (v1 == v3 ? "TAK" : "NIE") << endl;
	v3 = v1;
	cout << "Wektor v3: " << v3 << endl;
	cout << "v1 == v3: " << (v1 == v3 ? "TAK" : "NIE") << endl;
	getchar();
	return 0;
}
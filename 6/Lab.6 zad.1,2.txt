#include "stdafx.h"
#include <iostream>
using namespace std;

template <typename T>
class Vector {
private:
	size_t dimensions;
	T* data;
public:
	Vector<T>(size_t dimensions) :
		dimensions(dimensions), data(new T[dimensions]()) {}
	Vector<T>(const Vector<T>& v) {
		dimensions = v.size();
		data = new T[dimensions];
		for (size_t i = 0; i < dimensions; i++) {
			data[i] = v[i];
		}
	}
	Vector<T> operator = (const Vector<T>& v) {
		dimensions = v.size();
		delete[] data;
		data = new T[dimensions];
		for (size_t i = 0; i < dimensions; i++) {
			data[i] = v[i];
		}
		return *this;
	}
	virtual ~Vector<T>() {
		if (data) delete[] data;
	}
	size_t size() const {
		return dimensions;
	}
	T& at(size_t index) {
		return data[index];
	}
	const T& at(size_t index) const {
		return data[index];
	}
	T& operator [](size_t index) {
		return data[index];
	}
	const T& operator [](size_t index) const {
		return data[index];
	}
	template<typename T>
	friend bool operator ==(const Vector<T>& a, const Vector<T>& b) {
		if (&a == &b) return true;
		if (a.size() != b.size())
			return false;
		for (size_t i = 0; i < a.size(); i++) {
			if (a[i] != b[i]) return false;
		}
		return true;
	}
	template<typename T>
	friend bool operator !=(const Vector<T>& a, const Vector<T>& b) {
		if (a == b) return false;
		else return true;
	}
};
template<typename T>
Vector<T> add(const Vector<T>& a, const Vector<T>& b) {
	Vector<T> c(a.size());
	for (size_t i = 0; i < a.size(); i++) {
		c[i] = a[i] + b[i];
	}
	return c;
}
template<typename T>
Vector<T> operator +(const Vector<T>& a, const Vector<T>& b) {
	Vector<T> c(a.size());
	for (size_t i = 0; i < a.size(); i++) {
		c[i] = a[i] + b[i];
	}
	return c;
}
template<typename T>
bool equals(const Vector<T>& a, const Vector<T>& b) {
	if (&a == &b) return true;
	if (a.size() != b.size())
		return false;
	for (size_t i = 0; i < a.size(); i++) {
		if (a[i] != b[i]) return false;
	}
	return true;
}

template<typename T>
ostream& operator << (ostream& s, Vector<T> v) {
	for (size_t i = 0; i < v.size(); i++)
		s << v[i] << "   ";
	s << endl;
	return s;
}


int main() {
	typedef int T;
	const size_t d = 10;
	Vector<T> v1(d);
	for (size_t i = 0; i < d; i++) {
		v1[i] = (T)i;
	}
	cout << "Wektor v1: " << v1 << endl;
	Vector<T> v2 = v1 + v1;
	cout << "Wektor v2: " << v2 << endl;
	cout << "v1 == v1: " << (v1 == v1 ? "TAK" : "NIE") << endl;
	cout << "v1 != v1: " << (v1 != v1 ? "TAK" : "NIE") << endl;
	cout << "v1 == v2: " << (v1 == v2 ? "TAK" : "NIE") << endl;
	cout << "v1 != v2: " << (v1 != v2 ? "TAK" : "NIE") << endl;
	Vector<T> v3(5);
	cout << "Wektor v3: " << v3 << endl;
	cout << "v1 == v3: " << (v1 == v3 ? "TAK" : "NIE") << endl;
	v3 = v1;
	cout << "Wektor v3: " << v3 << endl;
	cout << "v1 == v3: " << (v1 == v3 ? "TAK" : "NIE") << endl;
	getchar();
	return 0;
}
